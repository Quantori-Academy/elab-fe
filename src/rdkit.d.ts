// Type definitons for RDKit.js
// Project: https://github.com/rdkit/rdkit-js
// Definitions by: adam-of-barot <https://github.com/adam-of-barot>

type JSONString = string;

/**
 * Represents a molecule object generated by RDKit.js
 *
 * @remarks
 * JSMol's are created using the {@link RDKitModule.get_mol | RDKitModule.get_mol()} methods.
 */
export interface JSMol {
  delete(): void;
  get_smiles(): string;
  get_cxsmiles(): string;
  get_smarts(): string;
  get_cxsmarts(): string;
  get_molblock(): string;
  get_v3Kmolblock(): string;
  get_pickle(): string;
  get_inchi(): string;
  get_json(): string;
  get_as_uint8array(): Uint8Array;
  get_svg(): string;
  get_svg(width: number, height: number): string;
  get_svg_with_highlights(details: string): string;
  get_substruct_match(q: JSMol): string;
  get_substruct_matches(q: JSMol): string;
  get_descriptors(): string;
  get_morgan_fp(): string;
  get_morgan_fp(options: JSONString): string;
  get_morgan_fp_as_binary_text(): string;
  get_morgan_fp_as_binary_text(radius: number, len: number): string;
  get_morgan_fp_as_uint8array(): Uint8Array;
  get_morgan_fp_as_uint8array(options: JSONString): Uint8Array;
  get_pattern_fp(): string;
  get_pattern_fp(options: JSONString): string;
  get_pattern_fp_as_binary_text(): string;
  get_pattern_fp_as_binary_text(len: number): string;
  get_pattern_fp_as_uint8array(): Uint8Array;
  get_pattern_fp_as_uint8array(options: JSONString): Uint8Array;
  condense_abbreviations(): string;
  condense_abbreviations(maxCoverage: number, useLinkers: boolean): string;
  condense_abbreviations_from_defs(definitions: string, maxCoverage: number, useLinkers: boolean): string;
  generate_aligned_coords(templateMol: JSMol, options: JSONString): string;
  is_valid(): boolean;
  has_coords(): boolean;
  get_stereo_tags(): string;
  get_aromatic_form(): string;
  get_kekule_form(): string;
  set_new_coords(): boolean;
  set_new_coords(useCoordGen: boolean): boolean;
  get_new_coords(): string;
  get_new_coords(useCoordGen: boolean): string;
  has_prop(key: string): boolean;
  get_prop_list(): string[];
  get_prop_list(includePrivate: boolean): string[];
  get_prop_list(includePrivate: boolean, includeComputed: boolean): string[];
  set_prop(key: string, val: string): boolean;
  set_prop(key: string, val: string, computed: boolean): boolean;
  get_prop(key: string): string;
  remove_hs(): string;
  add_hs(): string;
  normalize_depiction(): number;
  normalize_depiction(canonicalize: number): number;
  normalize_depiction(canonicalize: number, scaleFactor: number): number;
  straighten_depiction(): void;
  draw_to_canvas(canvas: HTMLCanvasElement, width: number, height: number): void;
  draw_to_canvas_with_highlights(canvas: HTMLCanvasElement, details: string): void;
  draw_to_canvas_with_offset(canvas: HTMLCanvasElement, offsetx: number, offsety: number, width: number, height: number): void;
}

/**
 * An object containing a collection of structures. Used for efficient substructure searching.
 *
 * @remarks
 * Add molecules to the library with the {@link add_mol}, {@link add_smiles} or {@link add_trusted_smiles} methods.
 *
 * Perform substructure searches with the {@link get_matches} method.
 */
export interface SubstructLibrary {
  add_mol(m: JSMol): number;
  add_smiles(smi: string): number;
  add_trusted_smiles(smi: string): number;
  get_mol(i: number): JSMol;
  get_matches(q: JSMol): string;
  get_matches(q: JSMol, maxResults: number): string;
  get_matches(q: JSMol, useChirality: boolean, numThreads: number, maxResults: number): string;
  count_matches(q: JSMol): number;
  count_matches(q: JSMol, useChirality: boolean, numThreads: number): number;
}

// constructor interfaces

/** Returns a new SubstructLibrary instance */
type SubstructLibraryConstructor = new () => SubstructLibrary;

/** The main RDKit module */
export interface RDKitModule {
  SubstructLibrary: SubstructLibraryConstructor;
  get_mol(input: string, details_json?: string): JSMol | null;
  get_mol_from_pickle(pkl: string): JSMol;
  get_mol_from_uint8array(pklAsUInt8Array: Uint8Array): JSMol;
  get_mol_copy(other: JSMol): JSMol;
  get_qmol(input: string): JSMol | null;
  get_inchikey_for_inchi(inchi: string): string;
  version(): string;
  prefer_coordgen(prefer: boolean): void;
  use_legacy_stereo_perception(value: boolean): void;
}

export interface RDKitLoaderOptions {
  locateFile?: () => string;
}

/**
 * Loads the RDKit module asynchronously.
 * In order to use the RDKit module, calling this function is necessary.
 */
export type RDKitLoader = (options?: RDKitLoaderOptions) => Promise<RDKitModule>;

declare global {
  interface Window {
    initRDKitModule: RDKitLoader;
  }
}
